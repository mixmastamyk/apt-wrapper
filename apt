#!/usr/bin/env python
''' A simpler interface to Debian APT commands. (C) 2012, Mike Miller
    License: GPLv3+
'''
import sys, os
from subprocess import call

__version__ = '0.92'
debug = False
# map commands to their appropriate binaries:
cmdmap = {
    # apt-get
    'autoclean': 'apt-get',
    'autoremove': 'apt-get',
    'build-dep': 'apt-get',
    'changelog': 'apt-get',
    'check': 'apt-get',
    'clean': 'apt-get',
    'dist-upgrade': 'apt-get',
    'download': 'apt-get',
    'dselect-upgrade': 'apt-get',
    'install': 'apt-get',
    'markauto': 'apt-get',
    'purge': 'apt-get',
    'remove': 'apt-get',
    'source': 'apt-get',
    'unmarkauto': 'apt-get',
    'update': 'apt-get',
    'upgrade': 'apt-get',

    # cache
    'depends': 'apt-cache',
    'dotty': 'apt-cache',
    'dump': 'apt-cache',
    'dumpavail': 'apt-cache',
    'gencaches': 'apt-cache',
    'pkgnames': 'apt-cache',
    'policy': 'apt-cache',
    'rdepends': 'apt-cache',
    'search': 'apt-cache',
    'show': 'apt-cache',
    'showauto': 'apt-cache',
    'showpkg': 'apt-cache',
    'showsrc': 'apt-cache',
    'stats': 'apt-cache',
    'unmet': 'apt-cache',
    'xvcg': 'apt-cache',

    # config
    'shell': 'apt-config',
    'dumpcon': 'apt-config',

    # aptitude
    'hold': 'aptitude',
    'unhold': 'aptitude',
    'download': 'aptitude',
    'reinstall': 'aptitude',
    'changelog': 'aptitude',
    'why': 'aptitude',
    'why-not': 'aptitude',

    'fingerprint': 'apt-key',
}
commands = sorted(set(cmdmap.keys()))

def is_uniq(fragment):
    ''' Check whether a given command fragment uniquely identifies a command.
        Returns:  a tuple with boolean, first command.
    '''
    results = [ c  for c in commands  if c.startswith(fragment) ]
    uniq = (len(results) == 1)
    return (uniq, (results or [None])[0])


# prepare & check args
args = sys.argv[1:]
if args:
    command = args[0]
else:
    sys.exit('Error: no command given.\n  Must be one of (%s).' %
             ', '.join(commands))

# enable debug text
if '-d' in args:
    args.remove('-d')
    debug = True

# check command
if command in cmdmap:
    binary = cmdmap[command]
else:
    uniq, command = is_uniq(command)
    if debug:
        print 'Unique:', uniq, command
    if not uniq:
        sys.exit('Error: unknown or ambiguous command, "%s"' % args[0])
    binary = cmdmap[command]

# check for root permissions, don't elevate for cache operations
if os.geteuid() == 0 or binary == 'apt-cache':
    prefix = ''
else:
    prefix = 'sudo '


# build command line
cmdline = prefix + ' '.join([binary, command] + args[1:])
if debug:
    print 'Running:', cmdline

# http://youtu.be/0hiUuL5uTKc?t=8s
sys.exit(call(cmdline, shell=True))
